(()=>{"use strict";var __webpack_modules__={869:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"O5\": () => (/* binding */ btnClickSound),\n  \"qd\": () => (/* binding */ getElapsedTime),\n  \"bx\": () => (/* binding */ saveResult),\n  \"dY\": () => (/* binding */ soundOn),\n  \"F8\": () => (/* binding */ startBrandNewGame),\n  \"N6\": () => (/* binding */ stopTimer),\n  \"Yy\": () => (/* binding */ updateClicks)\n});\n\n// UNUSED EXPORTS: saveGame, showLastResults, startSavedGame, startTimer\n\n;// CONCATENATED MODULE: ./src/pBtn.js\nclass pBtn {\n  startCol;\n  startRow;\n  isEmpty;\n\n  constructor(num, startCol, startRow) {\n    this.num = num;\n    this.startCol = startCol;\n    this.startRow = startRow;\n  }\n}\n\n;// CONCATENATED MODULE: ./src/modals.js\n\n\nfunction createModal(options) {\n  const bg = document.createElement('div');\n  const mainFrame = document.createElement('div');\n  bg.className = 'bg';\n  mainFrame.className = 'mainFrame';\n\n  bg.addEventListener('click', closeModal);\n  bg.append(mainFrame);\n  let frame;\n  if (options.win === true) {\n    frame = winModal(options.clicks, options.message);\n  } else if (options.res === true) {\n    frame = resultsModal(options.results);\n  } else if (options.restore === true) {\n    frame = restoreModal();\n    setTimeout(() => {\n      bg.classList.remove('active');\n      bg.remove();\n    }, 2000);\n  } else if (options.noSaved === true) {\n    frame = moreInfo(options.noSavedMessage);\n    setTimeout(() => {\n      bg.classList.remove('active');\n      bg.remove();\n    }, 2000);\n  } else {\n    frame = document.createElement('p');\n    frame.className = 'header-text';\n    frame.textContent = 'Something got wrong...';\n  }\n  mainFrame.append(frame);\n  frame.addEventListener('click', (e) => {\n    if (e.target.textContent.includes('again')) {\n      if (soundOn) btnClickSound.play();\n      startBrandNewGame();\n      setTimeout(() => {\n        bg.classList.remove('active');\n        bg.remove();\n      }, 100);\n    }\n    if (e.target.textContent.includes('care')) {\n      if (soundOn) btnClickSound.play();\n      setTimeout(() => {\n        bg.classList.remove('active');\n        bg.remove();\n      }, 100);\n    }\n  });\n\n  return bg;\n}\nfunction moreInfo(message) {\n  const main = document.createElement('div');\n  main.classList.add('win-container');\n  const infoText = document.createElement('h3');\n  infoText.className = 'restore__infotext';\n  infoText.textContent = message;\n  main.append(infoText);\n  return main;\n}\n\nfunction restoreModal() {\n  const main = document.createElement('div');\n  main.classList.add('win-container');\n  const infoText = document.createElement('h3');\n  infoText.className = 'restore__infotext';\n  infoText.textContent =\n    'Your last game was not completed, it has been restored.';\n  const explanation = document.createElement('h5');\n  explanation.className = 'restore__explanation';\n  explanation.textContent = \"If you don't desire to continue, start new game\";\n  main.append(infoText, explanation);\n  return main;\n}\n\nfunction resultsModal(data) {\n  const main = document.createElement('div');\n  main.classList.add('win-container', 'modal-container');\n  const closeBtn = document.createElement('div');\n  closeBtn.classList.add('close-btn');\n  closeBtn.addEventListener('click', (e) => {\n    const bg = e.target.closest('.bg');\n    bg.classList.remove('active');\n    bg.remove();\n  });\n  main.append(closeBtn);\n\n  const sortBtnContainer = document.createElement('div');\n  sortBtnContainer.classList.add('sortBtn__container');\n  for (let i = 0; i < 6; i++) {\n    const sortBtn = document.createElement('div');\n    sortBtn.classList.add('sort-btn');\n    sortBtn.textContent = `${i + 3}x${i + 3}`;\n    sortBtn.addEventListener('click', (e) => {\n      if (soundOn) btnClickSound.play();\n\n      switchRes(e, i + 3);\n    });\n    sortBtnContainer.append(sortBtn);\n  }\n  main.append(sortBtnContainer);\n\n  const resultsTitle = document.createElement('h3');\n  resultsTitle.classList.add('result-title');\n  const list = document.createElement('ul');\n  list.classList.add('results-container');\n  leaderBoard(4);\n\n  [...sortBtnContainer.children]\n    .filter((x) => x.textContent.includes('4x4'))[0]\n    .classList.add('sort-btn__active');\n\n  function leaderBoard(num) {\n    list.classList.add('appear');\n\n    list.innerHTML = '';\n    resultsTitle.textContent = `Best time score for ${num}x${num} field`;\n    const requestedArr = data\n      .filter((x) => x.size == num)\n      .sort((a, b) => a.seconds - b.seconds);\n    if (requestedArr.length > 10) requestedArr.length = 10;\n    if (requestedArr.length === 0) {\n      const line = document.createElement('li');\n      line.textContent = 'Win a game for the records!';\n      list.append(line);\n    } else {\n      requestedArr.forEach((x) => {\n        const line = document.createElement('li');\n        line.textContent = x.message;\n        list.append(line);\n      });\n    }\n    setTimeout(() => {\n      list.classList.remove('appear');\n    }, 200);\n  }\n\n  main.append(resultsTitle, list);\n\n  function switchRes(e, num) {\n    [...sortBtnContainer.children].forEach((x) =>\n      x.classList.remove('sort-btn__active')\n    );\n    e.target.classList.add('sort-btn__active');\n    list.classList.add('disappear');\n    setTimeout(() => {\n      list.classList.remove('disappear');\n      leaderBoard(num);\n    }, 200);\n  }\n\n  return main;\n}\n\nfunction winModal(clicks, message) {\n  const main = document.createElement('div');\n  main.className = 'win-container';\n  const congrats = document.createElement('h1');\n  const explanation = document.createElement('h3');\n  congrats.className = 'win-container__congrats';\n  explanation.className = 'win-container__explanation';\n\n  congrats.textContent = `Congratulations!`;\n  explanation.textContent = message + '!';\n  main.append(congrats, explanation, whatToDoNextBtns());\n  return main;\n}\n\nfunction closeModal(e) {\n  if (e.target.classList.contains('bg')) {\n    e.target.classList.remove('active');\n    e.target.remove();\n  }\n}\n\nfunction whatToDoNextBtns() {\n  const main = document.createElement('div');\n  main.className = 'doNextBtns-container';\n  const restartBtn = document.createElement('button');\n  const cancelBtn = document.createElement('button');\n  restartBtn.classList.add('quad', 'toDoBtn', 'controlBtns', 'closable');\n  cancelBtn.classList.add('quad', 'toDoBtn', 'controlBtns', 'closable');\n  restartBtn.textContent = 'Play again?';\n  cancelBtn.textContent = \"I don't care\";\n  main.append(restartBtn, cancelBtn);\n\n  return main;\n}\n\n;// CONCATENATED MODULE: ./src/game.js\n\n\n\n\nclass Game {\n  emptyBtn;\n  animAvailable;\n  clicksCounter;\n  btnsArrangement;\n  winCombo;\n  isComplete;\n  pgSound;\n  winSound;\n  dropSound;\n  clickedBtn;\n  startX;\n  startY;\n  touchesX = [];\n  touchesY = [];\n\n  constructor(wrapper, pgSize, clicks) {\n    this.wrapper = wrapper;\n    this.pgSize = pgSize;\n    this.setSizes();\n    this.btnsArrangement = [];\n    this.winCombo = [];\n    this.isComplete = false;\n    this.clicksCounter = clicks || 0;\n    this.emptyBtn = '';\n    this.animAvailable = true;\n    this.pgSound = new Audio('./assets/pop.wav');\n    this.winSound = new Audio('./assets/gameOver.wav');\n    this.dropSound = new Audio('./assets/drop.wav');\n  }\n\n  createPg() {\n    let num = 1;\n    this.isComplete = false;\n    this.wrapper.innerHTML = '';\n    let emptyCol = this.generateRandomEmpty();\n    let emptyRow = this.generateRandomEmpty();\n    this.wrapper.innerHTML = '';\n    for (let row = 1; row <= this.pgSize; row++) {\n      for (let col = 1; col <= this.pgSize; col++) {\n        const b = new pBtn(num, col, row);\n        if (col === emptyCol && row === emptyRow) {\n          b.isEmpty = true;\n          this.wrapper.append(this.drawBtn(b, false));\n          b.num = 0;\n          this.btnsArrangement.push(b);\n        } else {\n          b.isEmpty = false;\n          this.wrapper.append(this.drawBtn(b, true));\n          this.winCombo.push(num);\n          this.btnsArrangement.push(b);\n          num++;\n        }\n      }\n    }\n  }\n\n  arrangeExistedGame(dataBlock) {\n    this.isComplete = false;\n    this.wrapper.innerHTML = '';\n    this.btnsArrangement = dataBlock;\n    dataBlock.forEach((x) => {\n      const btn = this.drawBtn(x, !x.isEmpty);\n      this.wrapper.append(btn);\n    });\n  }\n\n  mixBtns() {\n    for (let i = 0; i < this.pgSize * 50; i++) {\n      const availForMove = [...this.wrapper.children].filter(\n        (x) =>\n          !x.classList.contains('quad-empty') && this.checkForEmptySibling(x)\n      );\n      let btnForMove = Math.floor(Math.random() * availForMove.length);\n      this.move(availForMove[btnForMove], true);\n    }\n  }\n  easyMixing() {\n    console.log('easyMixing');\n    for (let i = 0; i < 3; i++) {\n      const availForMove = [...this.wrapper.children].filter(\n        (x) =>\n          !x.classList.contains('quad-empty') && this.checkForEmptySibling(x)\n      );\n      let btnForMove = Math.floor(Math.random() * availForMove.length);\n      this.move(availForMove[btnForMove], true);\n    }\n  }\n\n  action(e) {\n    if (!this.animAvailable) return;\n    if (e.target.dataset.index === '0') return;\n\n    let hasEmptySibling = this.checkForEmptySibling(e.target);\n\n    if (hasEmptySibling) {\n      this.animAvailable = false;\n      if (soundOn) this.pgSound.play();\n      this.clickedBtn = e.target;\n      this.move(e.target, true);\n      updateClicks(++this.clicksCounter);\n      setTimeout(() => {\n        this.animAvailable = true;\n        this.checkForWin();\n      }, 200);\n    }\n  }\n\n  checkForEmptySibling(currentB) {\n    return (\n      (currentB.style.gridColumnStart === this.emptyBtn.style.gridColumnStart &&\n        Math.abs(\n          +currentB.style.gridRowStart - +this.emptyBtn.style.gridRowStart\n        ) === 1) ||\n      (currentB.style.gridRowStart === this.emptyBtn.style.gridRowStart &&\n        Math.abs(\n          +currentB.style.gridColumnStart - +this.emptyBtn.style.gridColumnStart\n        ) === 1)\n    );\n  }\n  dragStartHandler(e) {\n    this.clickedBtn = e.target;\n  }\n  dragOverHandler(e) {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  }\n  dragDropHandler(e) {\n    e.preventDefault();\n    if (this.checkForEmptySibling(this.clickedBtn)) {\n      if (soundOn) this.dropSound.play();\n      this.move(this.clickedBtn, false);\n      updateClicks(++this.clicksCounter);\n      this.checkForWin();\n    } else return;\n  }\n  onTouch(e) {\n    let btn = e.target;\n\n    if (e.type === 'touchstart') {\n      this.touchesX.length = 0;\n      this.touchesY.length = 0;\n      this.startX = Math.round(e.touches[0].clientX);\n      this.startY = Math.round(e.touches[0].clientY);\n    }\n    if (e.type === 'touchmove') {\n      this.touchesX.push(Math.round(e.touches[0].clientX));\n      this.touchesY.push(Math.round(e.touches[0].clientY));\n    }\n\n    if (\n      (this.startX < this.touchesX[this.touchesX.length - 1] &&\n        Math.abs(this.startY - this.touchesY[this.touchesY.length - 1]) < 10 &&\n        this.emptyBtn.style.gridColumnStart > btn.style.gridColumnStart) ||\n      (this.startX > this.touchesX[this.touchesX.length - 1] &&\n        Math.abs(this.startY - this.touchesY[this.touchesY.length - 1]) < 10 &&\n        this.emptyBtn.style.gridColumnStart < btn.style.gridColumnStart) ||\n      (this.startY < this.touchesY[this.touchesY.length - 1] &&\n        Math.abs(this.startX - this.touchesX[this.touchesX.length - 1]) < 10 &&\n        this.emptyBtn.style.gridRowStart > btn.style.gridRowStart) ||\n      (this.startY > this.touchesY[this.touchesY.length - 1] &&\n        Math.abs(this.startX - this.touchesX[this.touchesX.length - 1]) < 10 &&\n        this.emptyBtn.style.gridRowStart < btn.style.gridRowStart)\n    ) {\n      this.action(e);\n    }\n  }\n\n  move(currentBtn, withAnimation) {\n    let curCol = +currentBtn.style.gridColumnStart;\n    let curRow = +currentBtn.style.gridRowStart;\n    let emptyCol = +this.emptyBtn.style.gridColumnStart;\n    let emptyRow = +this.emptyBtn.style.gridRowStart;\n\n    let iB = this.btnsArrangement.filter(\n      (x) => x.num === +currentBtn.textContent\n    )[0];\n    let iEmpty = this.btnsArrangement.filter((x) => x.num === 0)[0];\n\n    iB.startCol = emptyCol;\n    iB.startRow = emptyRow;\n    iEmpty.startCol = curCol;\n    iEmpty.startRow = curRow;\n\n    if (curCol === emptyCol && emptyRow - curRow === 1) {\n      //  console.log('row >> 1', 'down');\n      //down\n      if (withAnimation) {\n        const trans = [\n          { transform: `translateY(${-this.btnSize}px)` },\n          { transform: 'none' },\n        ];\n        const duration = {\n          duration: 200,\n          iteration: 1,\n        };\n        currentBtn.animate(trans, duration);\n      }\n      currentBtn.style.gridRowStart = emptyRow;\n      this.emptyBtn.style.gridRowStart = curRow;\n    } else if (curCol === emptyCol && emptyRow - curRow === -1) {\n      //console.log('row >> -1', 'up');\n      //up\n      if (withAnimation) {\n        const trans = [\n          { transform: `translateY(${this.btnSize}px)` },\n          { transform: 'none' },\n        ];\n        const duration = {\n          duration: 200,\n          iteration: 1,\n        };\n        currentBtn.animate(trans, duration);\n      }\n      currentBtn.style.gridRowStart = emptyRow;\n      this.emptyBtn.style.gridRowStart = curRow;\n    } else if (curRow === emptyRow && emptyCol - curCol === 1) {\n      // console.log('Col >> 1', 'right');\n      //right\n      if (withAnimation) {\n        const trans = [\n          { transform: `translateX(${-this.btnSize}px)` },\n          { transform: 'none' },\n        ];\n        const duration = {\n          duration: 200,\n          iteration: 1,\n        };\n        currentBtn.animate(trans, duration);\n      }\n      currentBtn.style.gridColumnStart = emptyCol;\n      this.emptyBtn.style.gridColumnStart = curCol;\n    } else if (curRow === emptyRow && emptyCol - curCol === -1) {\n      // console.log('Col >> -1', 'left');\n      //left\n      if (withAnimation) {\n        const trans = [\n          { transform: `translateX(${this.btnSize}px)` },\n          { transform: 'none' },\n        ];\n        const duration = {\n          duration: 200,\n          iteration: 1,\n        };\n        currentBtn.animate(trans, duration);\n      }\n      currentBtn.style.gridColumnStart = emptyCol;\n      this.emptyBtn.style.gridColumnStart = curCol;\n    } else return;\n  }\n\n  checkForWin() {\n    if (this.isComplete) return;\n\n    const realArr = [...this.wrapper.children]\n      .filter((s) => !s.classList.contains('quad-empty'))\n      .sort(\n        (a, b) =>\n          `${a.style.gridRowStart}${a.style.gridColumnStart}` -\n          `${b.style.gridRowStart}${b.style.gridColumnStart}`\n      )\n      .map((x) => x.textContent);\n\n    if (this.winCombo.join('') === realArr.join('')) {\n      if (soundOn) this.winSound.play();\n      let winMessage;\n      if (this.clicksCounter == 1) {\n        winMessage = `${this.pgSize}x${\n          this.pgSize\n        } field resolved in ${this.getReadableTime(getElapsedTime())} with ${\n          this.clicksCounter\n        } move`;\n      }\n\n      winMessage = `${this.pgSize}x${\n        this.pgSize\n      } field resolved in ${this.getReadableTime(getElapsedTime())} with ${\n        this.clicksCounter\n      } moves`;\n\n      const dataBlock = {\n        win: true,\n        clicks: this.clicksCounter,\n        message: winMessage,\n        seconds: getElapsedTime(),\n        size: this.pgSize,\n      };\n      const winFrame = createModal(dataBlock);\n      saveResult(dataBlock);\n      winFrame.classList.add('active');\n      document.body.append(winFrame);\n      setTimeout(() => {\n        this.isComplete = true;\n        stopTimer();\n      }, 500);\n    } else {\n      return;\n    }\n  }\n\n  getReadableTime(time) {\n    let t = time + ' sec';\n    if (time >= 3600) {\n      t = `${Math.floor(time / 3600)} hours and ${time % 3600} min `;\n    }\n    if (time >= 60) t = `${Math.floor(time / 60)} min and ${time % 60} sec`;\n    return t;\n  }\n\n  drawBtn(b, isNotEmpty) {\n    const btn = document.createElement('div');\n    btn.className = 'q-btn';\n\n    btn.style.gridRowStart = b.startRow;\n    btn.style.gridColumnStart = b.startCol;\n\n    if (isNotEmpty) {\n      btn.classList.add('quad');\n      btn.textContent = b.num;\n      btn.dataset.index = b.num;\n      btn.draggable = true;\n    } else {\n      btn.classList.add('quad-empty');\n      btn.dataset.index = 0;\n      btn.textContent = '';\n      this.emptyBtn = btn;\n      btn.addEventListener('dragover', (e) => this.dragOverHandler(e));\n      btn.addEventListener('drop', (e) => this.dragDropHandler(e));\n    }\n    return btn;\n  }\n\n  generateRandomEmpty() {\n    return Math.floor(Math.random() * this.pgSize) + 1;\n  }\n\n  setSizes() {\n    if (window.matchMedia('(max-width: 300px)').matches) {\n      this.pgWidth = 200;\n    } else if (window.matchMedia('(max-width: 400px)').matches) {\n      this.pgWidth = 260;\n    } else if (window.matchMedia('(max-width: 700px)').matches) {\n      this.pgWidth = 400;\n    } else if (window.matchMedia('(max-width: 1200px)').matches) {\n      this.pgWidth = 500;\n    } else {\n      this.pgWidth = 600;\n    }\n    this.btnSize = Math.floor(this.pgWidth / this.pgSize);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/src.js\n\n\n\n\n\n\nlet playGroundSize;\nlet playGroundWidth;\nlet btnSize;\nlet currentGame;\nlet intId;\nlet elapsedTime;\nlet easy;\nlet soundOn;\nconst btnClickSound = new Audio('./assets/pop-click.wav');\n/* page structure */\n/* --- element creations --- */\nconst header = document.createElement('header');\nconst main = document.createElement('main');\nconst headerContainer = document.createElement('div');\n\nconst datatime = document.createElement('span');\nconst clickscounter = document.createElement('span');\nconst soundSwitchBtn = document.createElement('div');\n\nconst wrapper = document.createElement('div');\nconst startGameContainer = document.createElement('div');\nconst mixBtn = document.createElement('button');\n\nconst loadGameBtn = document.createElement('button');\n\nconst modeContainer = document.createElement('div');\nconst easyOrHardContainer = document.createElement('div');\nconst modeContainer__title = document.createElement('h4');\n\nconst easyMode = document.createElement('button');\nconst hardMode = document.createElement('button');\n\nconst threeMode = document.createElement('button');\nconst fourMode = document.createElement('button');\nconst fiveMode = document.createElement('button');\nconst sixMode = document.createElement('button');\nconst sevenMode = document.createElement('button');\nconst eightMode = document.createElement('button');\n\nconst moreBtnsCont = document.createElement('div');\nconst saveGameBtn = document.createElement('button');\nconst showLastBtn = document.createElement('button');\n\nconst gameTitle = document.createElement('div');\n\n/* --- element classlist --- */\nheaderContainer.className = 'header-container';\nstartGameContainer.classList.add('mode-container', 'moreBtns-container');\nmixBtn.classList.add('controlBtns', 'quad', 'mixbtn');\n\nloadGameBtn.classList.add('controlBtns', 'quad', 'savedGame');\n\nmodeContainer.classList.add('mode-container', 'mode-wrap');\neasyOrHardContainer.classList.add('mode-container');\nmodeContainer__title.classList.add('header-text', 'modeContainer__title');\n\neasyMode.classList.add('controlBtns', 'quad', 'easyMode', 'choose-mode');\nhardMode.classList.add(\n  'controlBtns',\n  'quad',\n  'hardMode',\n  'choose-mode',\n  'active-mode'\n);\n\nthreeMode.classList.add('controlBtns', 'quad', 'three', 'choose-mode');\nfourMode.classList.add('controlBtns', 'quad', 'four', 'choose-mode');\nfiveMode.classList.add('controlBtns', 'quad', 'five', 'choose-mode');\nsixMode.classList.add('controlBtns', 'quad', 'six', 'choose-mode');\nsevenMode.classList.add('controlBtns', 'quad', 'seven', 'choose-mode');\neightMode.classList.add('controlBtns', 'quad', 'eight', 'choose-mode');\n\nmoreBtnsCont.classList.add('mode-container', 'moreBtns-container');\nsaveGameBtn.classList.add('quad', 'controlBtns', 'save-game');\nshowLastBtn.classList.add('quad', 'controlBtns', 'show-last');\n\ndatatime.classList.add('datatime', 'header-text');\nclickscounter.classList.add('clicks-counter', 'header-text');\nsoundSwitchBtn.classList.add('sound-switcher');\n\nwrapper.className = 'wrapper';\n\ngameTitle.className = 'game-title';\n\n/* --- element content --- */\nmixBtn.textContent = 'Start new game';\nmixBtn.title = 'Mix buttons and restart';\n\nloadGameBtn.textContent = 'Load game';\nloadGameBtn.title = 'Load saved game';\n\nmodeContainer__title.textContent = 'choose a game mode';\n\neasyMode.textContent = 'Easy mode';\neasyMode.title = 'Choose this mode to resolve the puzzle fastly';\nhardMode.textContent = 'Hard mode';\nhardMode.title = 'Choose this mode to play seriously';\n\nthreeMode.textContent = '3 x 3';\nfourMode.textContent = '4 x 4';\nfiveMode.textContent = '5 x 5';\nsixMode.textContent = '6 x 6';\nsevenMode.textContent = '7 x 7';\neightMode.textContent = '8 x 8';\n\n[\n  threeMode.title,\n  fourMode.title,\n  fiveMode.title,\n  sixMode.title,\n  sevenMode.title,\n  eightMode.title,\n] = [\n  '3x3 game field',\n  '4x4 game field',\n  '5x5 game field',\n  '6x6 game field',\n  '7x7 game field',\n  '8x8 game field',\n];\n\nshowLastBtn.textContent = 'show last results';\nsaveGameBtn.textContent = 'save current game';\n\ndatatime.textContent = '00:00:00';\nclickscounter.textContent = '0';\n\ndatatime.title = 'Elapsed time';\nclickscounter.title = 'Game moves done';\nsoundSwitchBtn.title = 'Sound on/off';\n\ngameTitle.textContent = 'Puzzle game';\n\nwrapper.dataset.size = `${playGroundSize}x${playGroundSize}`;\n\n/* --- element append --- */\ndocument.body.append(header, main);\nheaderContainer.append(clickscounter, datatime, soundSwitchBtn);\nheader.append(headerContainer);\nheader.append(gameTitle);\nstartGameContainer.append(mixBtn, loadGameBtn);\nmain.append(wrapper, startGameContainer);\nmodeContainer.append(\n  threeMode,\n  fourMode,\n  fiveMode,\n  sixMode,\n  sevenMode,\n  eightMode\n);\nmain.append(modeContainer__title);\neasyOrHardContainer.append(easyMode, hardMode);\nmain.append(easyOrHardContainer, modeContainer);\n\nmoreBtnsCont.append(saveGameBtn, showLastBtn);\nmain.append(moreBtnsCont);\n\nmixBtn.addEventListener('click', startGameFromBtn);\nsoundSwitchBtn.addEventListener('click', toggleSound);\n\nmodeContainer.addEventListener('click', (e) => {\n  if (!e.target.classList.contains('quad')) return;\n  if (soundOn) btnClickSound.play();\n  [...modeContainer.children].forEach((x) => x.classList.remove('active-mode'));\n  const btn = e.target;\n  if (btn.classList.contains('three')) {\n    playGroundSize = 3;\n  }\n  if (btn.classList.contains('four')) {\n    playGroundSize = 4;\n  }\n  if (btn.classList.contains('five')) {\n    playGroundSize = 5;\n  }\n  if (btn.classList.contains('six')) {\n    playGroundSize = 6;\n  }\n  if (btn.classList.contains('seven')) {\n    playGroundSize = 7;\n  }\n  if (btn.classList.contains('eight')) {\n    playGroundSize = 8;\n  }\n  btn.classList.add('active-mode');\n  startGameFromBtn();\n});\n\neasyMode.addEventListener('click', changeEasyHardMode);\nhardMode.addEventListener('click', changeEasyHardMode);\n\nsaveGameBtn.addEventListener('click', () => {\n  if (soundOn) btnClickSound.play();\n  saveGame(false);\n});\nloadGameBtn.addEventListener('click', () => {\n  if (soundOn) btnClickSound.play();\n  startSavedGame(false);\n});\n\nshowLastBtn.addEventListener('click', showLastResults);\n\nwrapper.addEventListener('touchstart', (e) => currentGame.onTouch(e));\nwrapper.addEventListener('touchmove', (e) => currentGame.onTouch(e));\nwrapper.addEventListener('touchstart', (e) => currentGame.onTouch(e));\nwrapper.addEventListener('touchcancel', (e) => currentGame.onTouch(e));\n\nwrapper.addEventListener('click', (e) => currentGame.action(e));\n\nwrapper.addEventListener('dragstart', (e) => currentGame.dragStartHandler(e));\n\nsetSizes();\n/* --------------------------- */\n\nwindow.addEventListener('DOMContentLoaded', winLoad);\nwindow.addEventListener('beforeunload', savePreferences);\n\nfunction winLoad() {\n  if (localStorage.getItem('pGameSavedPrefers')) {\n    useSavedPrefs();\n  } else {\n    easy = false;\n    playGroundSize = 4;\n    soundOn = true;\n  }\n  if (!soundOn) soundSwitchBtn.classList.add('no-sound');\n  else soundSwitchBtn.classList.remove('no-sound');\n  [...modeContainer.children].forEach((x) => x.classList.remove('active-mode'));\n  [...modeContainer.children]\n    .filter((x) => x.textContent.includes(playGroundSize))[0]\n    .classList.add('active-mode');\n\n  [...easyOrHardContainer.children].forEach((x) =>\n    x.classList.remove('active-mode')\n  );\n  if (easy) easyMode.classList.add('active-mode');\n  else hardMode.classList.add('active-mode');\n  if (localStorage.getItem('pGameInProcess')) {\n    startSavedGame(true);\n  } else {\n    startBrandNewGame();\n  }\n}\n\nfunction startSavedGame(current) {\n  if (current) {\n    const restoreInfo = createModal({ restore: true });\n    restoreInfo.classList.add('active');\n    document.body.append(restoreInfo);\n    clearTimer();\n    stopTimer();\n    clickscounter.textContent = 0;\n    console.log('starting game!');\n\n    const savedGame = JSON.parse(localStorage.getItem('pGameInProcess'));\n    playGroundSize = savedGame.pgSize;\n    wrapper.dataset.size = `${playGroundSize}x${playGroundSize}`;\n    wrapper.innerHTML = '';\n    currentGame = new Game(wrapper, savedGame.pgSize, savedGame.clicks);\n    currentGame.winCombo = savedGame.winCombo;\n    currentGame.arrangeExistedGame(savedGame.btnsArrangement);\n\n    clickscounter.textContent = savedGame.clicks;\n    datatime.textContent = savedGame.timer;\n    startTimer(savedGame.seconds);\n\n    [...modeContainer.children].forEach((x) =>\n      x.classList.remove('active-mode')\n    );\n    [...modeContainer.children]\n      .filter(\n        (x) =>\n          x.textContent.includes(playGroundSize) && x.classList.contains('quad')\n      )[0]\n      .classList.add('active-mode');\n  } else {\n    if (localStorage.getItem('pGameToSaveAlone')) {\n      clearTimer();\n      stopTimer();\n      clickscounter.textContent = 0;\n      console.log('starting game!');\n\n      const savedGame = JSON.parse(localStorage.getItem('pGameToSaveAlone'));\n      playGroundSize = savedGame.pgSize;\n      wrapper.dataset.size = `${playGroundSize}x${playGroundSize}`;\n      wrapper.innerHTML = '';\n      currentGame = new Game(wrapper, savedGame.pgSize, savedGame.clicks);\n      currentGame.winCombo = savedGame.winCombo;\n      currentGame.arrangeExistedGame(savedGame.btnsArrangement);\n\n      clickscounter.textContent = savedGame.clicks;\n      datatime.textContent = savedGame.timer;\n      startTimer(savedGame.seconds);\n\n      [...modeContainer.children].forEach((x) =>\n        x.classList.remove('active-mode')\n      );\n      [...modeContainer.children]\n        .filter(\n          (x) =>\n            x.textContent.includes(playGroundSize) &&\n            x.classList.contains('quad')\n        )[0]\n        .classList.add('active-mode');\n    } else {\n      let message = \"You didn't save any game yet\";\n      const noSavedInfo = createModal({\n        noSaved: true,\n        noSavedMessage: message,\n      });\n      noSavedInfo.classList.add('active');\n      document.body.append(noSavedInfo);\n    }\n  }\n}\nfunction startGameFromBtn() {\n  if (soundOn) btnClickSound.play();\n\n  startBrandNewGame();\n}\n\nfunction startBrandNewGame() {\n  clearTimer();\n  stopTimer();\n  clickscounter.textContent = 0;\n  console.log('starting game!');\n  wrapper.dataset.size = `${playGroundSize}x${playGroundSize}`;\n  wrapper.innerHTML = '';\n  currentGame = new Game(wrapper, playGroundSize);\n  currentGame.createPg();\n  if (easy) currentGame.easyMixing();\n  else currentGame.mixBtns();\n  startTimer();\n}\n\nfunction saveResult(dataBlock) {\n  let resultsData;\n  if (localStorage.getItem('pGameLastResults')) {\n    let rd = localStorage.getItem('pGameLastResults');\n    resultsData = JSON.parse(rd);\n  } else {\n    resultsData = [];\n  }\n  resultsData.push(dataBlock);\n\n  resultsData = JSON.stringify(resultsData);\n  localStorage.setItem('pGameLastResults', resultsData);\n}\nfunction showLastResults() {\n  if (soundOn) btnClickSound.play();\n  let resultsData;\n  if (localStorage.getItem('pGameLastResults')) {\n    resultsData = JSON.parse(localStorage.getItem('pGameLastResults'));\n  } else resultsData = ['Nothing recorded yet', 'Win a game to create records'];\n\n  const resultsFrame = createModal({ res: true, results: resultsData });\n  resultsFrame.classList.add('active');\n  document.body.append(resultsFrame);\n}\n\n/* ...............save game */\n\nfunction saveGame(current) {\n  const game = {\n    pgSize: currentGame.pgSize,\n    btnsArrangement: currentGame.btnsArrangement,\n    clicks: currentGame.clicksCounter,\n    timer: datatime.textContent,\n    seconds: getElapsedTime(),\n    winCombo: currentGame.winCombo,\n  };\n  if (current) {\n    if (currentGame.isComplete) {\n      localStorage.removeItem('pGameInProcess');\n    } else {\n      localStorage.setItem('pGameInProcess', JSON.stringify(game));\n    }\n  } else {\n    localStorage.setItem('pGameToSaveAlone', JSON.stringify(game));\n  }\n}\n\nfunction updateClicks(text) {\n  clickscounter.textContent = '  ' + text;\n}\n/* sound */\nfunction toggleSound() {\n  if (soundOn) {\n    soundSwitchBtn.classList.add('no-sound');\n    soundOn = false;\n  } else {\n    soundSwitchBtn.classList.remove('no-sound');\n    soundOn = true;\n  }\n}\n\n/* datatimer */\nfunction startTimer(n) {\n  let result = 0;\n  let t = n || 0;\n\n  if (intId == null) {\n    intId = setInterval(() => {\n      t++;\n      let h = Math.floor(t / 3600);\n      let m = Math.floor((t % 3600) / 60);\n      let s = (t % 3600) % 60;\n      result = `${h < 10 ? '0' + h : h}:${m < 10 ? '0' + m : m}:${\n        s < 10 ? '0' + s : s\n      }`;\n      elapsedTime = t;\n      datatime.textContent = result;\n    }, 1000);\n  }\n}\nfunction getElapsedTime() {\n  return elapsedTime;\n}\nfunction stopTimer() {\n  clearInterval(intId);\n\n  intId = null;\n}\nfunction clearTimer() {\n  datatime.textContent = '00:00:00';\n  elapsedTime = 0;\n}\n\nfunction changeEasyHardMode(e) {\n  if (soundOn) btnClickSound.play();\n  [...easyOrHardContainer.children].forEach((x) =>\n    x.classList.remove('active-mode')\n  );\n  if (e.target.classList.contains('easyMode')) {\n    easy = true;\n  }\n  if (e.target.classList.contains('hardMode')) {\n    easy = false;\n  }\n  e.target.classList.add('active-mode');\n  startBrandNewGame();\n  /*  mixBtn.classList.add('takeAttention');\n  setTimeout(() => {\n    mixBtn.classList.remove('takeAttention');\n  }, 600); */\n}\n\nfunction savePreferences() {\n  const prefs = { mode: easy, pgSise: playGroundSize, sound: soundOn };\n  saveGame(true);\n\n  localStorage.setItem('pGameSavedPrefers', JSON.stringify(prefs));\n}\nfunction useSavedPrefs() {\n  const prefs = JSON.parse(localStorage.getItem('pGameSavedPrefers'));\n  easy = prefs.mode;\n  playGroundSize = prefs.pgSise;\n  soundOn = prefs.sound;\n}\n\n/* set sizes */\nwindow.addEventListener('resize', setSizes);\n\nfunction setSizes() {\n  if (window.matchMedia('(max-width: 300px)').matches) {\n    playGroundWidth = 200;\n  } else if (window.matchMedia('(max-width: 400px)').matches) {\n    playGroundWidth = 260;\n  } else if (window.matchMedia('(max-width: 700px)').matches) {\n    playGroundWidth = 400;\n  } else if (window.matchMedia('(max-width: 1200px)').matches) {\n    playGroundWidth = 500;\n  } else {\n    playGroundWidth = 600;\n  }\n  btnSize = Math.floor(playGroundWidth / playGroundSize);\n}\n\n\n//# sourceURL=webpack://puzzle-game/./src/src.js_+_3_modules?")}},__webpack_require__={d:(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},o:(n,e)=>Object.prototype.hasOwnProperty.call(n,e)},__webpack_exports__={};__webpack_modules__[869](0,__webpack_exports__,__webpack_require__)})();